properties(
    [
    buildDiscarder
        (logRotator (
            artifactDaysToKeepStr: '',
            artifactNumToKeepStr: '',
            daysToKeepStr: '14',
            numToKeepStr: '10'
        ) ),
    disableConcurrentBuilds()
    ]
)

node {
    def PYPI_CREDS = credentials("pypi")

    stage("Clone ts_config_ocs")
    {
        dir("ts_config_ocs") {
            git url: 'https://github.com/lsst-ts/ts_config_ocs.git'

            salobj_version = sh(returnStdout: true, script: "git describe --tags --always --dirty").trim()
            containerOpt = '--env TS_SALOBJ_VERSION=' + salobj_version + '--env TS_CONFIG_OCS_DIR=/home/saluser/ts_config_ocs -v ' + env.WORKSPACE + ':/home/saluser/source'
        }

    }

    stage("Pull Docker Image") {
        container = docker.image("lsstts/conda_package_builder:latest")
        container.pull()
    }

    stage("Create SALObj Conda package") {
        container.inside(containerOpt) {
            sh '''
                cd ~/source/conda
                source ~/miniconda3/bin/activate
                source $OSPL_HOME/release.com
                conda build --prefix-length 100 .
            '''
        }
    }

    stage("Push SALObj Conda package") {
        withCredentials([usernamePassword(credentialsId: 'CondaForge', passwordVariable: 'anaconda_pass', usernameVariable: 'anaconda_user')]) {
            container.inside(containerOpt) {
                sh '''
                    source ~/miniconda3/bin/activate
                    anaconda login --user ${anaconda_user} --password ${anaconda_pass}
                    anaconda upload -u lsstts --force ~/miniconda3/conda-bld/linux-64/ts-salobj*.tar.bz2
                   '''
            }
        }
    }

    stage("Create SALObj pypi package") {
        container.inside(containerOpt) {
            def RESULT = sh returnStatus: true, script: '''
                source ~/miniconda3/bin/activate
                source /opt/OpenSpliceDDS/V6.9.0/HDE/x86_64.linux/release.com
                pip install --upgrade twine
                cd ~/source/ 
                python setup.py sdist bdist_wheel
                python -m twine upload -u ${env.PYPI_CREDS_USR} -p ${env.PYPI_CREDS_PSW} dist/* 
            '''

            if ( RESULT != 0 ) {
                unstable("Failed to create/push pypi package.")
            }
        }
    }
}
